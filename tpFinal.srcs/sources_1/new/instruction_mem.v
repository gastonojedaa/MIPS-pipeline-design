`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 04.10.2023 17:51:51
// Design Name: 
// Module Name: instruction_mem
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module instruction_mem
#(
    parameter NB_PC = 32,
    parameter NB_INS = 32     
)
(
    input   i_clk,    
    input  [NB_PC-1:0] i_read_address,
    input   [NB_PC-1:0] i_write_address,
    input   [NB_INS-1:0] i_instruction,
    input   i_write_enable, // 0 READ - 1 WRITE
    output  [NB_INS-1:0] o_instruction
);

//localparam MEM_SIZE = (2**NB_PC) - 1;
localparam MEM_SIZE = 255;

integer i;
reg [NB_INS-1:0] ins_mem[0:MEM_SIZE];

// initial
// begin
//     for (i = 0; i <= MEM_SIZE; i = i + 1) begin
//         ins_mem[i] = 0;
//     end
// end
initial
begin
ins_mem[0] = 32'b00111100000000110000000000000000;
ins_mem[1] = 32'b00111100000001010000000000000011;
ins_mem[2] = 32'b00100000101001010000000000000101;
ins_mem[3] = 32'b00010000000000110000000000000001;
ins_mem[4] = 32'b00111100000111110000000011111111;
ins_mem[5] = 32'b00100000001000010000000000000001;
ins_mem[6] = 32'b10101100000000010000000000000001;
ins_mem[7] = 32'b10000000000000100000000000000001;
ins_mem[8] = 32'b00100000010000100000000000000110;
ins_mem[9] = 32'b10010000000000100000000000000010;
ins_mem[10] = 32'b10000100000000110000000000000011;
ins_mem[11] = 32'b10010100000001000000000000000100;
ins_mem[12] = 32'b10001100000001010000000000000101;
ins_mem[13] = 32'b10100000000001100000000000000110;
ins_mem[14] = 32'b10100100000001110000000000000111;
ins_mem[15] = 32'b10101100000010000000000000001000;
ins_mem[16] = 32'b00001000000000000000000000010011;
ins_mem[17] = 32'b00111100000010100000000000001010;
ins_mem[18] = 32'b00111100000010110000000000001011;
ins_mem[19] = 32'b00001100000000000000000000010110;
ins_mem[20] = 32'b00111100000110010000000000011001;
ins_mem[21] = 32'b00111100000110100000000000011010;
ins_mem[22] = 32'b00100011011110110000000000011011;
ins_mem[23] = 32'b00000011011000001110100000001001;
ins_mem[24] = 32'b00111100000011000000000000001100;
ins_mem[25] = 32'b00111100000011010000000000001101;
ins_mem[26] = 32'b00100001101011010000000000000001;
ins_mem[27] = 32'b00111100000011100000000000000010;
ins_mem[28] = 32'b00111100000011110000000000000100;
ins_mem[29] = 32'b00000001110011110111000000100101;
ins_mem[30] = 32'b00111100000100000000000000000010;
ins_mem[31] = 32'b00111100000100010000000000000100;
ins_mem[32] = 32'b00000010000100011000000000100100;
ins_mem[33] = 32'b00111100000100100000000000000110;
ins_mem[34] = 32'b00111100000100110000000000000100;
ins_mem[35] = 32'b00000010010100111001000000100110;
ins_mem[36] = 32'b00111100000101000000000000000001;
ins_mem[37] = 32'b00111100000101010000000011111111;
ins_mem[38] = 32'b00000010100101011010000000100111;
ins_mem[39] = 32'b00111100000101100000000000000001;
ins_mem[40] = 32'b00111100000011100000000000000111;
ins_mem[41] = 32'b00111100000100000000000000000011;
ins_mem[42] = 32'b00111100000100100000000000010010;
ins_mem[43] = 32'b00000000000101101011100100000000;
ins_mem[44] = 32'b00000000000011100111100110000010;
ins_mem[45] = 32'b00000000000100001000110100000011;
ins_mem[46] = 32'b11111111111111111111111111111111;
end

always@(posedge i_clk)
begin
    if(i_write_enable)
        ins_mem[i_write_address] <= i_instruction;    
end

assign o_instruction = ins_mem[i_read_address];

endmodule
